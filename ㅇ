스프링 컨테이너에서 스프링 빈을 등록하면 기본적으로 싱글톤(Singleton) 범위로 관리된다. 이때, 상태를 유지하는 필드를 사용하면 멀티스레드 환경에서 문제가 발생할 수 있다.
문제 발생 코드

```java
public class StatefulService {

    private int price; // 상태를 유지하는 필드

    public void order(String name, int price) {
        this.price = price; // 여기가 문제!
    }
}
```

문제점
- 싱글톤 객체는 애플리케이션에서 하나만 생성되고 공유한다.
- 필드(price)를 인스턴스 변수로 선언하면, 여러 스레드에서 공유되면서 값이 덮어씌워질 수 있다.
- 예를 들어:
    1. 스레드 A가 order("userA", 10_000)을 호출하면 price는 10,000원이 된다.
    2. 스레드 B가 order("userB", 20_000)을 호출하면 price는 20,000원으로 변경한다.
    3. 스레드 A가 가격을 조회하려 하면, 원래 기대했던 10,000원이 아닌 20,000원이 조회된다.
→ 이러한 문제를 "공유 필드로 인한 상태 유지 문제"라고 한다.

해결 방법: 무상태(Stateless) 방식으로 변경
- 필드 변수를 제거하고, 메서드에서 바로 값을 반환하도록 변경한다.
```java
public class StatefulService {

//    private int price; // 상태를 유지하는 필드 제거

    public int order(String name, int price) {
        return price; // 문제를 해결하기 위한 메서드 수정
    }
}
```

해결 방법 설명
- price를 필드 변수에서 제거하여 더 이상 공유되지 않도록 변경한다.
- order() 메서드는 price 값을 반환하므로, 스레드 간에 영향을 주지 않는다.
- 이제 각 요청이 독립적으로 동작하며, 동시성 문제를 피할 수 있다.

결론
- 스프링의 싱글톤 빈은 기본적으로 공유 객체이므로, 필드 값을 변경하는 방식은 위험하다.
- 무상태(Stateless) 설계를 하면 멀티스레드 환경에서도 안전하게 사용할 수 있다.
- 상태를 유지해야 하는 경우에는 요청별로 새로운 객체를 생성하거나, 지역 변수 사용을 고려해야 한다.
